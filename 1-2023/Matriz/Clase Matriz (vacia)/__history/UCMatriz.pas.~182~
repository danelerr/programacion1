unit UCMatriz;

interface
Uses SysUtils, math;
const
     Nf = 128;
     Nc = 128;
Type

    Matriz = Class
      Private
             NroFilas,
             NroColumnas : Word;
             Celdas: Array[1..Nf,1..Nc] Of Real;
      Public
            Procedure Redimensionar(NF,NC:Word);
            Function Filas : Word;
            Function Columnas : Word;
            Function ObtElement(F,C:Word):Real;
            Procedure ModElement(F,C:Word; E:Real);
            Procedure AddFila;
            Procedure AddColumna;
            Procedure InsFila(F:Word);
            Procedure InsColumna(C:Word);
            Procedure DelFila(F:Word);
            Procedure DelColumna(C:Word);
            Function SumarElementos:Real;
            function VectorPosF(p: word): word;
            function VectorPosC(p: word): word;
            function VectorPos(f, c: word): word;
            procedure intercambiar(i, j, k, l: word);
            function getNumMenBin: word;
            function sumaNumerosPre(p: word): real;
            procedure llenarFiboForma1;
            procedure llenarFiboForma2;
            function getNumMayorFilaColuma: real;

            function pivote(i, f: word): word;
            procedure qsort(i, f: word);
            procedure quickSort;
End;

implementation

{ Matriz }

function Matriz.getNumMayorFilaColuma: Real;
var i, j: word;
n1, n2, k, may: real;
begin
  may := 0;
  //buscar en las filas
  for i := 1 to NroFilas do begin
    k := 1;
    n1 := 0;
    n2 := 0;
    for j := 1 to NroColumnas do begin
      n1 := n1 * 10 + Celdas[i,j];
      n2 := celdas[i, j] * k + n2;
      k := k * 10;
    end;
    if n1 > may then may := n1;
    if n2 > may then may := n2;
  end;

  //buscar en las columnas
  for j := 1 to NroColumnas do begin
    K := 1;
    n1 := 0;
    n2 := 0;
    for i := 1 to NroFilas do begin
      n1 := n1 * 10 + Celdas[i,j];
      n2 := celdas[i, j] * k + n2;
      k := k * 10;
    end;
    if n1 > may then may := n1;
    if n2 > may then may := n2;
  end;
  result := may;
end;


function BinToDec(n: word): word;
var num, p: word;
begin
  p := 1;
  num := 0;
  while n <>0 do begin
    num := num + p*(n mod 10);
    n := n div 10;
    p := p * 2;
  end;
  result := num;
end;

procedure Matriz.llenarFiboForma1;
var i, j: word;
fib, ant, ant2: real;
begin
  ant := 0;
  ant2 := 1;
  for i := 1 to NroFilas do begin
    for j := 1 to NroColumnas do begin
      fib := ant + ant2;
      ant2 := ant;
      ant := fib;
      Celdas[i, j] := fib;
    end;
  end;
end;

procedure Matriz.llenarFiboForma2;
var i, j: word;
fib, ant, ant2: real;
b: boolean;
begin
  ant := 0;
  ant2 := 1;
  b := true;
  for i := NroFilas downto 1 do begin

    if b then begin
      for j := NroColumnas downto 1 do begin
        fib := ant + ant2;
        ant2 := ant;
        ant := fib;
        Celdas[i, j] := fib;
      end;
      b := false;
    end else begin
      for j := 1 to NroColumnas do begin
        fib := ant + ant2;
        ant2 := ant;
        ant := fib;
        Celdas[i, j] := fib;
      end;
      b := true;
    end;



  end;
end;

function Matriz.getNumMenBin: word;
var i, j: word;
num, men: real;
begin
  men := 999999;
 // for j := 1 to NroColumnas do men := men * 10 + celdas[1, j];

  for i := 1 to NroFilas do begin
    num := 0;
    for j := 1 to NroColumnas do begin
       num := num*10 + Celdas[i, j];
    end;
    if num < men then men := num;
  end;
  result := BinToDec(trunc(men));
end;


function Matriz.sumaNumerosPre(p: word): real;
var i, j: word;
num, suma, pot: real;
begin
  suma := 0;
  for i := 1 to NroFilas do begin
    num := 0;
    for j := 1 to NroColumnas do begin
       num := num*10 + Celdas[i, j];
    end;
    suma := suma + num;
  end;
  pot := power(10, p);
  result := suma/pot;
end;


procedure Matriz.AddColumna;
begin
     Inc(NroColumnas);

end;

procedure Matriz.AddFila;
begin
     Inc(NroFilas);

end;

function Matriz.Columnas: Word;
begin
     Result:=NroColumnas;
end;

procedure Matriz.DelColumna(C: Word);
begin
  //implementar
end;

procedure Matriz.DelFila(F: Word);
var
  I: Word;
  j: Integer;
begin
     if (F>0)And(F<=NroFilas) then
     Begin
      for I := F to NroFilas-1 do
        for j := 1 to NroColumnas do
          Celdas[i,j]:=Celdas[i+1,j];
      Dec(NroFilas);
     End
     Else raise Exception.Create('Fila Invalida');
end;

function Matriz.Filas: Word;
begin
     Result:=NroFilas;
end;

procedure Matriz.InsColumna(C: Word);
begin
   //implementar
end;

procedure Matriz.InsFila(F: Word);
var
  I: Word;
  J: Integer;
begin
      if (F>0)And(F<=NroFilas) then
     Begin
          Inc(NroFilas);
          for I := NroFilas downto F+1 do
             for J := 1 to NroColumnas do
                 Celdas[I,J]:=Celdas[I-1,J];
     End
     Else raise Exception.Create('Columna Invalida');

end;

procedure Matriz.ModElement(F, C: Word; E: Real);
begin
     if (F>0)And(F<=NroFilas) And(C>0)And(C<=NroColumnas) then
         Celdas[F,C]:=E
     Else raise Exception.Create('Posicion Invalida');
end;

function Matriz.ObtElement(F, C: Word): Real;
begin
     if (F>0)And(F<=NroFilas) And(C>0)And(C<=NroColumnas) then
         Result:=Celdas[F,C]
     Else raise Exception.Create('Posicion Invalida');
end;

procedure Matriz.Redimensionar(NF, NC: Word);
begin
     NroFilas:=NF;
     NroColumnas:=NC;
end;

function Matriz.SumarElementos: Real;
var
  I,J: Integer;
  Suma : Real;
begin
    Suma:=0;
     for I := 1 to NroFilas do
        for J := 1 to NroColumnas do
            Suma:=Suma+Celdas[i,j];
     Result:=Suma;
end;


//para trabajar con ordenamiento vector
function Matriz.VectorPos(f, c: word): word;
begin
  result := (f-1)*NroColumnas+c;
end;

function Matriz.VectorPosC(p: word): word;
begin
  result:=((p-1) mod NroColumnas)+1;
end;

function Matriz.VectorPosF(p: word): word;
begin
  result := ((p-1) div NroColumnas)+1;
end;



procedure Matriz.intercambiar(i, j, k, l: word);
var x: real;
begin
  x:=Celdas[i, j];
  Celdas[i, j]:=Celdas[k, l];
  Celdas[k, l]:=x;
end;


function Matriz.pivote(i, f: word): word;
var t: boolean;
p: word;
begin
  t := true;
  repeat
    if celdas[VectorPosF(i), VectorPosC(i)] > celdas[VectorPosF(f), VectorPosC(f)] then begin
      intercambiar(VectorPosF(i), VectorPosC(i), VectorPosF(f), VectorPosC(f));

      t := not t;
    end;
    if t then i:=i+1
    else f := f-1;
  until i = f;
  p := i;
  result := p;
end;


procedure Matriz.qsort(i, f: word);
var n, p: word;
begin
   n := f - i + 1;
   if n>1 then begin
      p := pivote(i, f);
      qsort(i, p-1);
      qsort(p+1, f);
   end;
end;
procedure Matriz.quickSort;
begin
   qsort(1, NroFilas*NroColumnas);
end;




end.

